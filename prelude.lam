; Copyright 2015 Mitchell Kember. Subject to the MIT License.

;; Logic

T = \xy.x
F = \xy.y

True  = T
False = F

And = \xy.x y F
Or  = \xy.x T y
Not = \x.x F T

;; General functions

Id   = \x.x
Comp = \fgx.f(gx)

;; Arithmetic

Zero = \fx.x
Succ = \nfx.f(nfx)
Pred = \nfx.n(\gh.h(gf))(\u.x)\u.u

Add  = \nmfx.nf(mfx)
Sub  = \nm.m Pred n
Mult = \nmf.m(nf)
Div  = \nm.If(LT? n m)Zero(Succ(Div(Sub n m)m))
Quot = \nm.If(LT? n m)n(Quot(Sub n m)m)
Pow  = \nm.mn

Zero? = \x.x(\x.F)T
LTEq? = \mn.Zero?(Sub m n)
Eq?   = \mn.And(LTEq? m n)(LTEq? n m)
LT?   = \mn.And(LTEq? m n)(Not(Eq? m n))
GT?   = \mn.Not(LTEq? m n)
GTEq? = \mn.Not(LT? m n)

;; Math functions

Max = \ab.(GT? a b)ab
Min = \ab.(GT? a b)ba

GCD = \nm.If(Zero? m)n(GCD m (Quot n m))

Factorial = \n.If(Zero? n)1(Mult n (Factorial (Pred n)))

;; Lists

Cons = \xyc.cxy
Car  = \p.p T
Cdr  = \p.p F

Nil  = \x.T
Nil? = \p.p(\xy.F)

Get = \np.If(Zero? n)(Car p)(Get(Pred n)(Cdr p))
Take = \np.If(Zero? n)Nil(Cons(Car p)(Take(Pred n)(Cdr p)))
Drop = \np.n Cdr p
TakeWhile = \ps.If(Nil? s)s(If(p(Car s))
  (Cons(Car s)(TakeWhile p (Cdr s)))Nil)
DropWhile = \ps.If(Nil? s)s(If(p(Car s))
  (DropWhile p (Cdr s))s)
Map = \fs.If(Nil? s)s(Cons(f(Car s))(Map f(Cdr s)))
Filter = \ps.If(Nil? s)s(If(p(Car s))
  (Cons(Car s)(Filter p (Cdr s)))(Filter p (Cdr s)))
FoldL = \fxp.If(Nil? x)(FoldL f (fx(Car p)) (Cdr p))
Concat = FoldL Append Nil

Any = \ps.If(Nil? p)False(If(p(Car s))True(Any p (Cdr s)))
All = \ps.If(Nil? p)True(If(p(Car s))(All p (Cdr s))False)

Length = \p.If(Nil? p)Zero(Succ(Length(Cdr p)))
Append = \pq.If(Nil? p)q(Cons(Car p)(Append(Cdr p)q))

Reverse = \p.Reverse' p Nil
Reverse' = \pa.If(Nil? p)a(Reverse'(Cdr p)(Cons(Car p)a))

Range = \n.Range' n Nil
Range' = \ns.If(Zero? n)s(Range'(Pred n)(Cons n s))
